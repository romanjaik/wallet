apply plugin: 'java'
apply plugin: 'com.google.protobuf'

compileJava {
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
}

buildscript {
  repositories {
    maven {
      // The google mirror is less flaky than mavenCentral()
      url "https://maven-central.storage-download.googleapis.com/repos/central/data/"
    }
  }
  dependencies {
    // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier
    // gradle versions
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
  }
}

repositories {
  maven {
      // The google mirror is less flaky than mavenCentral()
    url "https://maven-central.storage-download.googleapis.com/repos/central/data/"
  }
  mavenLocal()
}

// IMPORTANT: You probably want the non-SNAPSHOT version of gRPC. Make sure you
// are looking at a tagged version of the example and not "master"!

// Feel free to delete the comment at the next line. It is just for safely
// updating the version in our release process.
def grpcVersion = '1.2.0'
def nettyTcNativeVersion = '2.0.7.Final'
def protobufVersion = '3.5.1'
def protocVersion = '3.5.1-1'

dependencies {
  compile "com.google.api.grpc:proto-google-common-protos:1.0.0"
  compile "io.grpc:grpc-alts:1.11.0"
  compile "io.grpc:grpc-netty:${grpcVersion}"
  compile "io.grpc:grpc-protobuf:${grpcVersion}"
  compile "io.grpc:grpc-stub:${grpcVersion}"
  
  // https://mvnrepository.com/artifact/org.hibernate/hibernate-core
  compile group: 'org.hibernate', name: 'hibernate-core', version: '5.3.1.Final'
  
  // https://mvnrepository.com/artifact/postgresql/postgresql
  compile group: 'postgresql', name: 'postgresql', version: '9.1-901-1.jdbc4'
  
  compile 'javax.xml.bind:jaxb-api:2.3.0'

  // https://mvnrepository.com/artifact/com.sun.xml.bind/jaxb-impl
  compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.0'

  // https://mvnrepository.com/artifact/com.sun.xml.bind/jaxb-core
  compile group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0'

  // https://mvnrepository.com/artifact/javax.activation/activation
  compile group: 'javax.activation', name: 'activation', version: '1.1.1'

  compileOnly "javax.annotation:javax.annotation-api:1.2"

  compile "io.netty:netty-tcnative-boringssl-static:${nettyTcNativeVersion}"
  
  // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
  
  // https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12
  compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'

  compile "com.google.protobuf:protobuf-java-util:${protobufVersion}"

  testCompile "io.grpc:grpc-testing:${grpcVersion}"
  testCompile "junit:junit:4.12"
  testCompile "org.mockito:mockito-core:1.9.5"
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:${protocVersion}"
  }
  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {}
    }
  }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"] 
        }
    }
}

// Generate IntelliJ IDEA's .idea & .iml project files
apply plugin: 'idea'

// Provide convenience executables for trying out the examples.
apply plugin: 'application'

startScripts.enabled = false

task createGrpcServer(type: CreateStartScripts) {
	  mainClassName = 'grpc.server.GrpcServer'
	  applicationName = 'grpc-server'
	  outputDir = new File(project.buildDir, 'tmp')
	  classpath = jar.outputs.files + project.configurations.runtime
}

task createGrpcClient(type: CreateStartScripts) {
	  mainClassName = 'grpc.client.GrpcMainClient'
	  applicationName = 'grpc-client'
	  outputDir = new File(project.buildDir, 'tmp')
	  classpath = jar.outputs.files + project.configurations.runtime
}

tasks.withType(Test) {
    scanForTestClasses = false
    include "**/*Test.class"
}

applicationDistribution.into('bin') {
	  from(createGrpcServer)
	  from(createGrpcClient)
	  fileMode = 0755
}